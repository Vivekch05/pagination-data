{"version":3,"sources":["actions/PaginationDataAction.js","actions/Types.js","components/PaginationRounded.js","components/PaginationDataList.js","components/Main.js","App.js","serviceWorker.js","reducers/PaginationDataReducer.js","reducers/Index.js","store.js","index.js"],"names":["getData","dispatch","a","axios","get","then","response","console","log","data","type","payload","getPager","totalItems","currentPage","pageSize","startPage","endPage","totalPages","Math","ceil","startIndex","endIndex","min","pages","Array","keys","map","i","getPageOfItems","pageOfItems","PaginationRounded","this","props","getPagerData","length","style","display","justifyContent","marginTop","border","backgroundColor","padding","cursor","href","onClick","handlePage","color","className","page","index","width","textAlign","key","Component","connect","state","getDataList","dataItem","dataList","pager","PaginationDataList","setPage","slice","initialPage","zIndex","paddingTop","class","margin","placeholder","borderRadius","pointerEvents","float","marginRight","icon","faSearch","overflow","background","scope","item","id","title","event_date_utc","flight_number","flexWrap","align","details","links","article","target","Button","variant","size","wikipedia","position","bottom","React","Main","exact","path","component","App","Boolean","window","location","hostname","match","initState","selectedDataList","combineReducers","action","middleware","thunk","store","createStore","rootReducer","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.59efc4a8.chunk.js","sourcesContent":["import { GET_DATA,GET_PAGER,GET_PAGE_ITEMS} from './Types';\r\nimport axios from 'axios';\r\n\r\n export const getData = () => async (dispatch) => {\r\n     await axios.get(\"https://api.spacexdata.com/v3/history\")\r\n        .then((response) => {\r\n            console.log(response.data);\r\n              dispatch({ type: GET_DATA, payload: response.data });\r\n        })\r\n};\r\n\r\nexport const getPager= (totalItems, currentPage, pageSize)=> (dispatch)=> {\r\n    // default to first page\r\n    currentPage = currentPage || 1;\r\n\r\n    // default page size is 10\r\n    pageSize = pageSize || 5;\r\n\r\n    // calculate total pages\r\n    var totalPages = Math.ceil(totalItems / pageSize);\r\n    //console.log(totalPages);\r\n    var startPage, endPage;\r\n    if (totalPages <= 10) {\r\n        // less than 10 total pages so show all\r\n        startPage = 1;\r\n        endPage = totalPages;\r\n    } else {\r\n        // more than 10 total pages so calculate start and end pages\r\n        if (currentPage <= 6) {\r\n            startPage = 1;\r\n            endPage = 10;\r\n        } else if (currentPage + 4 >= totalPages) {\r\n            startPage = totalPages - 9;\r\n            endPage = totalPages;\r\n        } else {\r\n            startPage = currentPage - 5;\r\n            endPage = currentPage + 4;\r\n        }\r\n    }\r\n\r\n    // calculate start and end item indexes\r\n    var startIndex = (currentPage - 1) * pageSize;\r\n    var endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);\r\n\r\n    // create an array of pages to ng-repeat in the pager control\r\n    var pages = [...Array((endPage + 1) - startPage).keys()].map(i => startPage + i);\r\n\r\n    // return object with all pager properties required by the view\r\n    var pageData={\r\n        totalItems: totalItems,\r\n        currentPage: currentPage,\r\n        pageSize: pageSize,\r\n        totalPages: totalPages,\r\n        startPage: startPage,\r\n        endPage: endPage,\r\n        startIndex: startIndex,\r\n        endIndex: endIndex,\r\n        pages: pages\r\n    };\r\n     dispatch({ type: GET_PAGER, payload: pageData });\r\n}\r\n\r\nexport const getPageOfItems=(pageOfItems)=>(dispatch)=>{\r\n\r\n    dispatch({ type: GET_PAGE_ITEMS, payload: pageOfItems });\r\n}","export const GET_DATA = \"GET_DATA\";\r\nexport const GET_PAGER = \"GET_PAGER\";\r\nexport const GET_PAGE_ITEMS = \"GET_PAGE_ITEMS\";\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { getPager, getData, getPageOfItems } from '../actions/PaginationDataAction';\r\n\r\n\r\nclass PaginationRounded extends Component {\r\n    \r\n    render() {\r\n        if (!this.props.getPagerData.pages || this.props.getPagerData.pages.length <= 1) {\r\n            return null;\r\n        }\r\n\r\n        return (\r\n            <div style={{ display: \"flex\", justifyContent: \"center\", marginTop: \"20px\", border: \"1px solid black\",backgroundColor:\"black\", padding: \"5px\",cursor:\"pointer\" }}>\r\n                <a href=\"#\" onClick={() => this.props.handlePage(1)}>\r\n                    <label style={{ border: \"1px solid #E67E22\",color:\"white\", padding: \"5px\",cursor:\"pointer\" }} className={this.props.getPagerData.currentPage === 1 ? 'disabled' : ''}>\r\n                        First\r\n                    </label>\r\n                </a>\r\n                <a href=\"#\" onClick={() => this.props.handlePage(this.props.getPagerData.currentPage - 1)}>\r\n                    <label style={{ border: \"1px solid #E67E22\",color:\"white\", padding: \"5px\",cursor:\"pointer\" }} className={this.props.getPagerData.currentPage === 1 ? 'disabled' : ''}>\r\n                        Previous\r\n                    </label>\r\n                </a>\r\n                {this.props.getPagerData.pages.map((page, index) => {\r\n                    console.log(this.props.getPagerData.currentPage === page);\r\n                    return (\r\n                        <div>\r\n                            <a href=\"#\" onClick={() => this.props.handlePage(page)} >\r\n                                <label style={{ width:\"30px\", border: \"1px solid #E67E22\",color:\"white\", padding: \"5px\",textAlign:\"center\",cursor:\"pointer\" }} key={index} className={this.props.getPagerData.currentPage === page ? 'active' : ''}>\r\n                                    {page}\r\n                                </label>\r\n                            </a>\r\n                        </div>\r\n                    )\r\n                }\r\n                )}\r\n                <a href=\"#\" onClick={() => this.props.handlePage(this.props.getPagerData.currentPage + 1)}>\r\n                    <label style={{ border: \"1px solid #E67E22\",color:\"white\", padding: \"5px\",cursor:\"pointer\" }} className={this.props.getPagerData.currentPage === this.props.getPagerData.totalPages ? 'disabled' : ''}>\r\n                        Next\r\n                    </label>\r\n                </a>\r\n                <a href=\"#\" onClick={() => this.props.handlePage(this.props.getPagerData.totalPages)}>\r\n                    <label style={{ border: \"1px solid #E67E22\",color:\"white\", padding: \"5px\",cursor:\"pointer\" }} className={this.props.getPagerData.currentPage === this.props.getPagerData.totalPages ? 'disabled' : ''}>\r\n                        Last\r\n                    </label>\r\n                </a>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n//PaginationRounded.propTypes = propTypes;\r\n//PaginationRounded.defaultProps = defaultProps;\r\nconst mapStateToProps = (state) => ({\r\n    getDataList: state.dataItem.dataList,\r\n    getPagerData: state.dataItem.pager,\r\n\r\n    // getSeletcedDataList: state.dataItem.selectedDataList\r\n\r\n\r\n});\r\nexport default connect(mapStateToProps, { getData, getPager, getPageOfItems })(PaginationRounded);","import React from 'react';\r\nimport PaginationRounded from './PaginationRounded';\r\nimport { connect } from 'react-redux';\r\nimport { getData, getPageOfItems, getPager } from '../actions/PaginationDataAction';\r\nimport { Button } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\r\nclass PaginationDataList extends React.Component {\r\n    \r\n    async componentDidMount() {\r\n        await this.props.getData();\r\n        console.log(this.props.getDataList.length);\r\n        if (this.props.getDataList && this.props.getDataList.length) {\r\n            this.setPage(this.props.initialPage);\r\n        }\r\n    }\r\n\r\n\r\n    setPage = (page) => {\r\n        var pageSize = this.props.pageSize;\r\n        //console.log(pageSize, page, this.props.getDataList.length);\r\n        this.props.getPager(this.props.getDataList.length, page, pageSize);\r\n\r\n        console.log(this.props.getPagerData);\r\n        if (page < 1 || page > this.props.getPagerData.totalPages) {\r\n            return;\r\n        }\r\n\r\n        // get new page of items from items array\r\n        var pageOfItems = this.props.getDataList.slice(this.props.getPagerData.startIndex, this.props.getPagerData.endIndex + 1);\r\n\r\n        this.props.getPageOfItems(pageOfItems);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"jumbotron jumbotron-fluid\">\r\n                <div className=\"container\">\r\n                    <div style={{  zIndex: \"1\", paddingTop: \"50px\", textAlign: \"center\", width: \"100%\", backgroundColor: \"black\", color: \"#E67E22\" }}>\r\n                        <h1>All data List</h1>\r\n                        <div class=\"form-group\" style={{ width: \"auto\", margin: \"auto\", padding: \"30px 80px 30px 80px\" }}>\r\n                            <input type=\"text\" class=\"form-control\" placeholder=\"Search\"\r\n                                style={{ borderRadius: \"30px\" }} />\r\n                            <span style={{\r\n                                textAlign: \"center\",\r\n                                pointerEvents: \"none\",\r\n                                color: \"#aaa\",\r\n                                zIndex: \"2\",\r\n                                float: \"right\",\r\n                                marginTop: \"-30px\",\r\n                                marginRight: \"20px\"\r\n                            }}><FontAwesomeIcon icon={faSearch} /></span>\r\n                        </div>\r\n                    </div>\r\n                    <table style={{overflow:\"hidden\"}} className=\"table table-striped\">\r\n                        <thead style={{ background: \"black\", color: \"white\", padding: \"5px\"}}>\r\n                            <tr>\r\n                                <th scope=\"col\">Id</th>\r\n                                <th scope=\"col\">Title</th>\r\n                                <th scope=\"col\">Event Date</th>\r\n                                <th scope=\"col\">Flight Number</th>\r\n                                <th scope=\"col\">Body</th>\r\n                                <th scope=\"col\">Link</th>\r\n                            </tr>\r\n                        </thead>\r\n                        {\r\n                            this.props.pageOfItems.map((item) => {\r\n                                return (\r\n                                    <tbody key={item.id}>\r\n                                        <tr>\r\n                                            <td>{item.id}</td>\r\n                                            <td>{item.title}</td>\r\n                                            <td>{item.event_date_utc}</td>\r\n                                            <td>{item.flight_number}</td>\r\n                                            <td style={{flexWrap:\"wrap\"}} align=\"justify\">{item.details}</td>\r\n                                            <td style={{display:\"flex\"}}>\r\n                                                <a href={item.links.article} target=\"blank\" ><Button variant=\"success\" size=\"sm\" style={{ marginRight: \"10px\" }}>Article</Button></a>\r\n                                                <a href={item.links.wikipedia} target=\"blank\" ><Button variant=\"primary\" size=\"sm\">WikiPedia</Button></a>\r\n                                            </td>\r\n                                        </tr>\r\n                                    </tbody>\r\n                                )\r\n                            })\r\n                        }\r\n                    </table>\r\n                    <div style={{position:\"sticky\",bottom:\"0\"}}>\r\n                    <PaginationRounded handlePage={this.setPage} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = (state) => ({\r\n    getDataList: state.dataItem.dataList,\r\n    pageOfItems: state.dataItem.pageOfItems,\r\n    pageSize: state.dataItem.pageSize,\r\n    initialPage: state.dataItem.initialPage,\r\n    getPagerData: state.dataItem.pager,\r\n});\r\nexport default connect(mapStateToProps, { getData, getPageOfItems, getPager })(PaginationDataList);","import React, { Component } from 'react'\r\nimport PaginationDataList from './PaginationDataList'\r\nimport { Switch,Route } from 'react-router-dom'\r\n\r\nexport default class Main extends Component {\r\n    render() {\r\n        return (\r\n           <Switch>\r\n               <Route exact path=\"/\" component={PaginationDataList}/>\r\n           </Switch>\r\n        )\r\n    }\r\n}\r\n\r\n","import React from 'react';\nimport './App.css';\nimport Main from './components/Main';\nimport { HashRouter } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <HashRouter>\n      <Main />\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { GET_DATA, GET_PAGER, GET_PAGE_ITEMS } from \"../actions/Types\";\r\n\r\nconst initState = {\r\n    dataList: [],\r\n    selectedDataList:[],\r\n    pager:{},\r\n    initialPage: 1,\r\n    pageSize: 5,\r\n    pageOfItems:[]\r\n};\r\nexport default function (state = initState, action) {\r\n    switch (action.type) {\r\n        case GET_DATA:\r\n            return {\r\n                ...state,\r\n                dataList: action.payload,\r\n            };\r\n            case GET_PAGER:\r\n            return {\r\n                ...state,\r\n                pager: action.payload,\r\n            };\r\n            case GET_PAGE_ITEMS:\r\n            return {\r\n                ...state,\r\n                pageOfItems: action.payload,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","\r\nimport { combineReducers } from \"redux\";\r\nimport PaginationDataReducer from \"./PaginationDataReducer\";\r\nexport default combineReducers({\r\n  dataItem: PaginationDataReducer\r\n});","import {createStore, applyMiddleware} from 'redux';\r\nimport thunk from 'redux-thunk';\r\n//import {composeWithDevTools} from 'redux-devtools-extension';\r\nimport rootReducer from './reducers/Index';\r\n\r\nconst middleware=[thunk];\r\nconst initState= {};\r\n\r\nconst store = createStore(rootReducer,initState,applyMiddleware(...middleware));\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from \"react-redux\";\nimport store from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}